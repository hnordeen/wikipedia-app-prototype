{"ast":null,"code":"import _objectSpread from\"/Users/haleynordeen/Desktop/Wikipedia App Prototyping/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const WIKIPEDIA_API_URL='https://en.wikipedia.org/w/api.php';export const searchWikipedia=async query=>{const params=new URLSearchParams({action:'query',list:'search',srsearch:query,format:'json',origin:'*',srlimit:'10'});try{const response=await fetch(\"\".concat(WIKIPEDIA_API_URL,\"?\").concat(params));const data=await response.json();const searchResults=data.query.search;// Return results immediately with imagesLoading state\nconst initialResults=searchResults.map(result=>({title:decodeURIComponent(result.title.replace(/_/g,' ')),snippet:result.snippet,pageid:result.pageid,imagesLoading:true}));// Fetch images in parallel for all results\nconst resultsWithImages=await Promise.all(initialResults.map(async result=>{const images=await getArticleImages(result.title);return _objectSpread(_objectSpread({},result),{},{images:images.slice(0,4),imagesLoading:false});}));return resultsWithImages;}catch(error){console.error('Error searching Wikipedia:',error);return[];}};export const getArticleImages=async title=>{const params=new URLSearchParams({action:'query',prop:'images|imageinfo',titles:title,imlimit:'4',// Reduced from 10 to 4 since we only show 4 images\niiprop:'url|extmetadata',format:'json',origin:'*'});try{const response=await fetch(\"\".concat(WIKIPEDIA_API_URL,\"?\").concat(params));const data=await response.json();const pages=data.query.pages;const pageId=Object.keys(pages)[0];const images=pages[pageId].images||[];// Filter out non-image files and get image URLs\nconst imagePromises=images.filter(img=>img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/)).map(async img=>{var _imageInfo$extmetadat,_imageInfo$extmetadat2;const imageInfoParams=new URLSearchParams({action:'query',prop:'imageinfo',titles:img.title,iiprop:'url|extmetadata',format:'json',origin:'*'});const imageResponse=await fetch(\"\".concat(WIKIPEDIA_API_URL,\"?\").concat(imageInfoParams));const imageData=await imageResponse.json();const imagePages=imageData.query.pages;const imagePageId=Object.keys(imagePages)[0];const imageInfo=imagePages[imagePageId].imageinfo[0];return{title:img.title,url:imageInfo.url,description:((_imageInfo$extmetadat=imageInfo.extmetadata)===null||_imageInfo$extmetadat===void 0?void 0:(_imageInfo$extmetadat2=_imageInfo$extmetadat.ImageDescription)===null||_imageInfo$extmetadat2===void 0?void 0:_imageInfo$extmetadat2.value)||''};});return Promise.all(imagePromises);}catch(error){console.error('Error fetching article images:',error);return[];}};export const getArticleContent=async title=>{const params=new URLSearchParams({action:'parse',page:title,format:'json',prop:'text',origin:'*',disableeditsection:'1',mobileformat:'1'});try{const response=await fetch(\"\".concat(WIKIPEDIA_API_URL,\"?\").concat(params));const data=await response.json();return data.parse.text['*']||'No content found.';}catch(error){console.error('Error fetching article:',error);return'Error loading article content.';}};","map":{"version":3,"names":["WIKIPEDIA_API_URL","searchWikipedia","query","params","URLSearchParams","action","list","srsearch","format","origin","srlimit","response","fetch","concat","data","json","searchResults","search","initialResults","map","result","title","decodeURIComponent","replace","snippet","pageid","imagesLoading","resultsWithImages","Promise","all","images","getArticleImages","_objectSpread","slice","error","console","prop","titles","imlimit","iiprop","pages","pageId","Object","keys","imagePromises","filter","img","toLowerCase","match","_imageInfo$extmetadat","_imageInfo$extmetadat2","imageInfoParams","imageResponse","imageData","imagePages","imagePageId","imageInfo","imageinfo","url","description","extmetadata","ImageDescription","value","getArticleContent","page","disableeditsection","mobileformat","parse","text"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/api/wikipedia.ts"],"sourcesContent":["const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\n\nexport interface SearchResult {\n  title: string;\n  snippet: string;\n  pageid: number;\n  images?: ArticleImage[];\n  imagesLoading?: boolean;\n}\n\nexport interface ArticleImage {\n  title: string;\n  url: string;\n  description: string;\n}\n\nexport const searchWikipedia = async (query: string): Promise<SearchResult[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map((result: any) => ({\n      title: decodeURIComponent(result.title.replace(/_/g, ' ')),\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(\n      initialResults.map(async (result: SearchResult) => {\n        const images = await getArticleImages(result.title);\n        return {\n          ...result,\n          images: images.slice(0, 4),\n          imagesLoading: false\n        };\n      })\n    );\n\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\n\nexport const getArticleImages = async (title: string): Promise<ArticleImage[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4', // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images\n      .filter((img: any) => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/))\n      .map(async (img: any) => {\n        const imageInfoParams = new URLSearchParams({\n          action: 'query',\n          prop: 'imageinfo',\n          titles: img.title,\n          iiprop: 'url|extmetadata',\n          format: 'json',\n          origin: '*'\n        });\n\n        const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n        const imageData = await imageResponse.json();\n        const imagePages = imageData.query.pages;\n        const imagePageId = Object.keys(imagePages)[0];\n        const imageInfo = imagePages[imagePageId].imageinfo[0];\n\n        return {\n          title: img.title,\n          url: imageInfo.url,\n          description: imageInfo.extmetadata?.ImageDescription?.value || ''\n        };\n      });\n\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\n\nexport const getArticleContent = async (title: string): Promise<string> => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: title,\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    disableeditsection: '1',\n    mobileformat: '1'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    return data.parse.text['*'] || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}