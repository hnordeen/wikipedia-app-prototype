{"ast":null,"code":"const HISTORY_KEY='wikipedia_history';// Create a custom event for history updates\nconst HISTORY_UPDATE_EVENT='wikipedia_history_update';export const addToHistory=(title,snippet,thumbnail)=>{const history=getHistory();// Remove existing entry if present (to update it)\nconst filteredHistory=history.filter(item=>item.title!==title);// Add new entry at the beginning\nconst newHistory=[{title,snippet,thumbnail,timestamp:Date.now()},...filteredHistory];// Keep only the last 100 items\nconst trimmedHistory=newHistory.slice(0,100);localStorage.setItem(HISTORY_KEY,JSON.stringify(trimmedHistory));// Dispatch event to notify listeners of the update\nwindow.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));};export const getHistory=()=>{const historyString=localStorage.getItem(HISTORY_KEY);if(!historyString)return[];try{return JSON.parse(historyString);}catch(error){console.error('Error parsing history:',error);return[];}};export const clearHistory=()=>{localStorage.removeItem(HISTORY_KEY);// Dispatch event to notify listeners of the update\nwindow.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));};export const getHistoryInsights=()=>{const history=getHistory();const now=new Date();// Calculate weekly count\nconst startOfWeek=new Date(now.getFullYear(),now.getMonth(),now.getDate()-now.getDay());const weeklyArticles=history.filter(item=>new Date(item.timestamp)>=startOfWeek);// Calculate today's count\nconst startOfToday=new Date(now.getFullYear(),now.getMonth(),now.getDate());const todayArticles=history.filter(item=>new Date(item.timestamp)>=startOfToday);// Find most active hour\nconst hourCounts=new Array(24).fill(0);history.forEach(item=>{const hour=new Date(item.timestamp).getHours();hourCounts[hour]++;});const mostActiveHour=hourCounts.reduce((max,count,hour)=>count>max.count?{hour,count}:max,{hour:0,count:0});// Calculate streaks\nconst dateSet=new Set();history.forEach(item=>{const date=new Date(item.timestamp);dateSet.add(date.toDateString());});let currentStreak=0;let longestStreak=0;let currentDate=new Date();let isOngoing=true;// Check current streak\nwhile(dateSet.has(currentDate.toDateString())){currentStreak++;currentDate.setDate(currentDate.getDate()-1);}if(!dateSet.has(new Date().toDateString())){isOngoing=false;currentStreak=0;}// Find longest streak\nconst dates=Array.from(dateSet).map(d=>new Date(d));dates.sort((a,b)=>b.getTime()-a.getTime());let streak=1;let maxStreak=1;let endDate=dates[0];for(let i=1;i<dates.length;i++){const diff=Math.round((dates[i-1].getTime()-dates[i].getTime())/(1000*60*60*24));if(diff===1){streak++;if(streak>maxStreak){maxStreak=streak;endDate=dates[i-1];}}else{streak=1;}}return{weeklyCount:weeklyArticles.length,todayCount:todayArticles.length,mostActiveHour,longestStreak:{days:maxStreak,endDate:endDate||new Date()},currentStreak:{days:currentStreak,ongoing:isOngoing}};};// Export the event name for listeners\nexport const HISTORY_EVENTS={UPDATE:HISTORY_UPDATE_EVENT};","map":{"version":3,"names":["HISTORY_KEY","HISTORY_UPDATE_EVENT","addToHistory","title","snippet","thumbnail","history","getHistory","filteredHistory","filter","item","newHistory","timestamp","Date","now","trimmedHistory","slice","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","historyString","getItem","parse","error","console","clearHistory","removeItem","getHistoryInsights","startOfWeek","getFullYear","getMonth","getDate","getDay","weeklyArticles","startOfToday","todayArticles","hourCounts","Array","fill","forEach","hour","getHours","mostActiveHour","reduce","max","count","dateSet","Set","date","add","toDateString","currentStreak","longestStreak","currentDate","isOngoing","has","setDate","dates","from","map","d","sort","a","b","getTime","streak","maxStreak","endDate","i","length","diff","Math","round","weeklyCount","todayCount","days","ongoing","HISTORY_EVENTS","UPDATE"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/services/historyService.ts"],"sourcesContent":["import { ArticleImage } from '../api/wikipedia';\n\nexport interface HistoryItem {\n  title: string;\n  snippet: string;\n  timestamp: number;\n  thumbnail?: ArticleImage;\n}\n\nexport interface HistoryInsights {\n  weeklyCount: number;\n  todayCount: number;\n  mostActiveHour: {\n    hour: number;\n    count: number;\n  };\n  longestStreak: {\n    days: number;\n    endDate: Date;\n  };\n  currentStreak: {\n    days: number;\n    ongoing: boolean;\n  };\n}\n\nconst HISTORY_KEY = 'wikipedia_history';\n\n// Create a custom event for history updates\nconst HISTORY_UPDATE_EVENT = 'wikipedia_history_update';\n\nexport const addToHistory = (title: string, snippet: string, thumbnail?: ArticleImage) => {\n  const history = getHistory();\n  \n  // Remove existing entry if present (to update it)\n  const filteredHistory = history.filter(item => item.title !== title);\n  \n  // Add new entry at the beginning\n  const newHistory = [{\n    title,\n    snippet,\n    thumbnail,\n    timestamp: Date.now()\n  }, ...filteredHistory];\n\n  // Keep only the last 100 items\n  const trimmedHistory = newHistory.slice(0, 100);\n  \n  localStorage.setItem(HISTORY_KEY, JSON.stringify(trimmedHistory));\n\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\nexport const getHistory = (): HistoryItem[] => {\n  const historyString = localStorage.getItem(HISTORY_KEY);\n  if (!historyString) return [];\n  \n  try {\n    return JSON.parse(historyString);\n  } catch (error) {\n    console.error('Error parsing history:', error);\n    return [];\n  }\n};\n\nexport const clearHistory = () => {\n  localStorage.removeItem(HISTORY_KEY);\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\nexport const getHistoryInsights = (): HistoryInsights => {\n  const history = getHistory();\n  const now = new Date();\n  \n  // Calculate weekly count\n  const startOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\n  const weeklyArticles = history.filter(item => new Date(item.timestamp) >= startOfWeek);\n  \n  // Calculate today's count\n  const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const todayArticles = history.filter(item => new Date(item.timestamp) >= startOfToday);\n  \n  // Find most active hour\n  const hourCounts = new Array(24).fill(0);\n  history.forEach(item => {\n    const hour = new Date(item.timestamp).getHours();\n    hourCounts[hour]++;\n  });\n  const mostActiveHour = hourCounts.reduce(\n    (max, count, hour) => (count > max.count ? { hour, count } : max),\n    { hour: 0, count: 0 }\n  );\n  \n  // Calculate streaks\n  const dateSet = new Set();\n  history.forEach(item => {\n    const date = new Date(item.timestamp);\n    dateSet.add(date.toDateString());\n  });\n  \n  let currentStreak = 0;\n  let longestStreak = 0;\n  let currentDate = new Date();\n  let isOngoing = true;\n  \n  // Check current streak\n  while (dateSet.has(currentDate.toDateString())) {\n    currentStreak++;\n    currentDate.setDate(currentDate.getDate() - 1);\n  }\n  \n  if (!dateSet.has(new Date().toDateString())) {\n    isOngoing = false;\n    currentStreak = 0;\n  }\n  \n  // Find longest streak\n  const dates = Array.from(dateSet).map(d => new Date(d as string));\n  dates.sort((a, b) => b.getTime() - a.getTime());\n  \n  let streak = 1;\n  let maxStreak = 1;\n  let endDate = dates[0];\n  \n  for (let i = 1; i < dates.length; i++) {\n    const diff = Math.round((dates[i-1].getTime() - dates[i].getTime()) / (1000 * 60 * 60 * 24));\n    if (diff === 1) {\n      streak++;\n      if (streak > maxStreak) {\n        maxStreak = streak;\n        endDate = dates[i-1];\n      }\n    } else {\n      streak = 1;\n    }\n  }\n\n  return {\n    weeklyCount: weeklyArticles.length,\n    todayCount: todayArticles.length,\n    mostActiveHour,\n    longestStreak: {\n      days: maxStreak,\n      endDate: endDate || new Date()\n    },\n    currentStreak: {\n      days: currentStreak,\n      ongoing: isOngoing\n    }\n  };\n};\n\n// Export the event name for listeners\nexport const HISTORY_EVENTS = {\n  UPDATE: HISTORY_UPDATE_EVENT\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}