{"ast":null,"code":"const HISTORY_KEY = 'wikipedia_history';\n\n// Create a custom event for history updates\nconst HISTORY_UPDATE_EVENT = 'wikipedia_history_update';\nexport const addToHistory = (title, snippet, thumbnail) => {\n  const history = getHistory();\n\n  // Remove existing entry if present (to update it)\n  const filteredHistory = history.filter(item => item.title !== title);\n\n  // Add new entry at the beginning\n  const newHistory = [{\n    title,\n    snippet,\n    thumbnail,\n    timestamp: Date.now()\n  }, ...filteredHistory];\n\n  // Keep only the last 100 items\n  const trimmedHistory = newHistory.slice(0, 100);\n  localStorage.setItem(HISTORY_KEY, JSON.stringify(trimmedHistory));\n\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\nexport const getHistory = () => {\n  const historyString = localStorage.getItem(HISTORY_KEY);\n  if (!historyString) return [];\n  try {\n    return JSON.parse(historyString);\n  } catch (error) {\n    console.error('Error parsing history:', error);\n    return [];\n  }\n};\nexport const clearHistory = () => {\n  localStorage.removeItem(HISTORY_KEY);\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\n// Export the event name for listeners\nexport const HISTORY_EVENTS = {\n  UPDATE: HISTORY_UPDATE_EVENT\n};","map":{"version":3,"names":["HISTORY_KEY","HISTORY_UPDATE_EVENT","addToHistory","title","snippet","thumbnail","history","getHistory","filteredHistory","filter","item","newHistory","timestamp","Date","now","trimmedHistory","slice","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","historyString","getItem","parse","error","console","clearHistory","removeItem","HISTORY_EVENTS","UPDATE"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/services/historyService.ts"],"sourcesContent":["import { ArticleImage } from '../api/wikipedia';\n\nexport interface HistoryItem {\n  title: string;\n  snippet: string;\n  timestamp: number;\n  thumbnail?: ArticleImage;\n}\n\nconst HISTORY_KEY = 'wikipedia_history';\n\n// Create a custom event for history updates\nconst HISTORY_UPDATE_EVENT = 'wikipedia_history_update';\n\nexport const addToHistory = (title: string, snippet: string, thumbnail?: ArticleImage) => {\n  const history = getHistory();\n  \n  // Remove existing entry if present (to update it)\n  const filteredHistory = history.filter(item => item.title !== title);\n  \n  // Add new entry at the beginning\n  const newHistory = [{\n    title,\n    snippet,\n    thumbnail,\n    timestamp: Date.now()\n  }, ...filteredHistory];\n\n  // Keep only the last 100 items\n  const trimmedHistory = newHistory.slice(0, 100);\n  \n  localStorage.setItem(HISTORY_KEY, JSON.stringify(trimmedHistory));\n\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\nexport const getHistory = (): HistoryItem[] => {\n  const historyString = localStorage.getItem(HISTORY_KEY);\n  if (!historyString) return [];\n  \n  try {\n    return JSON.parse(historyString);\n  } catch (error) {\n    console.error('Error parsing history:', error);\n    return [];\n  }\n};\n\nexport const clearHistory = () => {\n  localStorage.removeItem(HISTORY_KEY);\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\n// Export the event name for listeners\nexport const HISTORY_EVENTS = {\n  UPDATE: HISTORY_UPDATE_EVENT\n}; "],"mappings":"AASA,MAAMA,WAAW,GAAG,mBAAmB;;AAEvC;AACA,MAAMC,oBAAoB,GAAG,0BAA0B;AAEvD,OAAO,MAAMC,YAAY,GAAGA,CAACC,KAAa,EAAEC,OAAe,EAAEC,SAAwB,KAAK;EACxF,MAAMC,OAAO,GAAGC,UAAU,CAAC,CAAC;;EAE5B;EACA,MAAMC,eAAe,GAAGF,OAAO,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACP,KAAK,KAAKA,KAAK,CAAC;;EAEpE;EACA,MAAMQ,UAAU,GAAG,CAAC;IAClBR,KAAK;IACLC,OAAO;IACPC,SAAS;IACTO,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC,EAAE,GAAGN,eAAe,CAAC;;EAEtB;EACA,MAAMO,cAAc,GAAGJ,UAAU,CAACK,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;EAE/CC,YAAY,CAACC,OAAO,CAAClB,WAAW,EAAEmB,IAAI,CAACC,SAAS,CAACL,cAAc,CAAC,CAAC;;EAEjE;EACAM,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAACtB,oBAAoB,CAAC,CAAC;AAC7D,CAAC;AAED,OAAO,MAAMM,UAAU,GAAGA,CAAA,KAAqB;EAC7C,MAAMiB,aAAa,GAAGP,YAAY,CAACQ,OAAO,CAACzB,WAAW,CAAC;EACvD,IAAI,CAACwB,aAAa,EAAE,OAAO,EAAE;EAE7B,IAAI;IACF,OAAOL,IAAI,CAACO,KAAK,CAACF,aAAa,CAAC;EAClC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAM;EAChCZ,YAAY,CAACa,UAAU,CAAC9B,WAAW,CAAC;EACpC;EACAqB,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAACtB,oBAAoB,CAAC,CAAC;AAC7D,CAAC;;AAED;AACA,OAAO,MAAM8B,cAAc,GAAG;EAC5BC,MAAM,EAAE/B;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}