{"ast":null,"code":"const HISTORY_KEY = 'wikipedia_history';\n\n// Create a custom event for history updates\nconst HISTORY_UPDATE_EVENT = 'wikipedia_history_update';\nexport const addToHistory = (title, snippet, thumbnail) => {\n  const history = getHistory();\n\n  // Remove existing entry if present (to update it)\n  const filteredHistory = history.filter(item => item.title !== title);\n\n  // Add new entry at the beginning\n  const newHistory = [{\n    title,\n    snippet,\n    thumbnail,\n    timestamp: Date.now()\n  }, ...filteredHistory];\n\n  // Keep only the last 100 items\n  const trimmedHistory = newHistory.slice(0, 100);\n  localStorage.setItem(HISTORY_KEY, JSON.stringify(trimmedHistory));\n\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\nexport const getHistory = () => {\n  const historyString = localStorage.getItem(HISTORY_KEY);\n  if (!historyString) return [];\n  try {\n    return JSON.parse(historyString);\n  } catch (error) {\n    console.error('Error parsing history:', error);\n    return [];\n  }\n};\nexport const clearHistory = () => {\n  localStorage.removeItem(HISTORY_KEY);\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\nexport const getHistoryInsights = () => {\n  const history = getHistory();\n  const now = new Date();\n\n  // Calculate weekly count\n  const startOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\n  const weeklyArticles = history.filter(item => new Date(item.timestamp) >= startOfWeek);\n\n  // Calculate today's count\n  const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const todayArticles = history.filter(item => new Date(item.timestamp) >= startOfToday);\n\n  // Find most active hour\n  const hourCounts = new Array(24).fill(0);\n  history.forEach(item => {\n    const hour = new Date(item.timestamp).getHours();\n    hourCounts[hour]++;\n  });\n  const mostActiveHour = hourCounts.reduce((max, count, hour) => count > max.count ? {\n    hour,\n    count\n  } : max, {\n    hour: 0,\n    count: 0\n  });\n\n  // Calculate streaks\n  const dateSet = new Set();\n  history.forEach(item => {\n    const date = new Date(item.timestamp);\n    dateSet.add(date.toDateString());\n  });\n  let currentStreak = 0;\n  let longestStreak = 0;\n  let currentDate = new Date();\n  let isOngoing = true;\n\n  // Check current streak\n  while (dateSet.has(currentDate.toDateString())) {\n    currentStreak++;\n    currentDate.setDate(currentDate.getDate() - 1);\n  }\n  if (!dateSet.has(new Date().toDateString())) {\n    isOngoing = false;\n    currentStreak = 0;\n  }\n\n  // Find longest streak\n  const dates = Array.from(dateSet).map(d => new Date(d));\n  dates.sort((a, b) => b.getTime() - a.getTime());\n  let streak = 1;\n  let maxStreak = 1;\n  let endDate = dates[0];\n  for (let i = 1; i < dates.length; i++) {\n    const diff = Math.round((dates[i - 1].getTime() - dates[i].getTime()) / (1000 * 60 * 60 * 24));\n    if (diff === 1) {\n      streak++;\n      if (streak > maxStreak) {\n        maxStreak = streak;\n        endDate = dates[i - 1];\n      }\n    } else {\n      streak = 1;\n    }\n  }\n  return {\n    weeklyCount: weeklyArticles.length,\n    todayCount: todayArticles.length,\n    mostActiveHour,\n    longestStreak: {\n      days: maxStreak,\n      endDate: endDate || new Date()\n    },\n    currentStreak: {\n      days: currentStreak,\n      ongoing: isOngoing\n    }\n  };\n};\n\n// Export the event name for listeners\nexport const HISTORY_EVENTS = {\n  UPDATE: HISTORY_UPDATE_EVENT\n};","map":{"version":3,"names":["HISTORY_KEY","HISTORY_UPDATE_EVENT","addToHistory","title","snippet","thumbnail","history","getHistory","filteredHistory","filter","item","newHistory","timestamp","Date","now","trimmedHistory","slice","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","historyString","getItem","parse","error","console","clearHistory","removeItem","getHistoryInsights","startOfWeek","getFullYear","getMonth","getDate","getDay","weeklyArticles","startOfToday","todayArticles","hourCounts","Array","fill","forEach","hour","getHours","mostActiveHour","reduce","max","count","dateSet","Set","date","add","toDateString","currentStreak","longestStreak","currentDate","isOngoing","has","setDate","dates","from","map","d","sort","a","b","getTime","streak","maxStreak","endDate","i","length","diff","Math","round","weeklyCount","todayCount","days","ongoing","HISTORY_EVENTS","UPDATE"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/services/historyService.ts"],"sourcesContent":["import { ArticleImage } from '../api/wikipedia';\n\nexport interface HistoryItem {\n  title: string;\n  snippet: string;\n  timestamp: number;\n  thumbnail?: ArticleImage;\n}\n\nexport interface HistoryInsights {\n  weeklyCount: number;\n  todayCount: number;\n  mostActiveHour: {\n    hour: number;\n    count: number;\n  };\n  longestStreak: {\n    days: number;\n    endDate: Date;\n  };\n  currentStreak: {\n    days: number;\n    ongoing: boolean;\n  };\n}\n\nconst HISTORY_KEY = 'wikipedia_history';\n\n// Create a custom event for history updates\nconst HISTORY_UPDATE_EVENT = 'wikipedia_history_update';\n\nexport const addToHistory = (title: string, snippet: string, thumbnail?: ArticleImage) => {\n  const history = getHistory();\n  \n  // Remove existing entry if present (to update it)\n  const filteredHistory = history.filter(item => item.title !== title);\n  \n  // Add new entry at the beginning\n  const newHistory = [{\n    title,\n    snippet,\n    thumbnail,\n    timestamp: Date.now()\n  }, ...filteredHistory];\n\n  // Keep only the last 100 items\n  const trimmedHistory = newHistory.slice(0, 100);\n  \n  localStorage.setItem(HISTORY_KEY, JSON.stringify(trimmedHistory));\n\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\nexport const getHistory = (): HistoryItem[] => {\n  const historyString = localStorage.getItem(HISTORY_KEY);\n  if (!historyString) return [];\n  \n  try {\n    return JSON.parse(historyString);\n  } catch (error) {\n    console.error('Error parsing history:', error);\n    return [];\n  }\n};\n\nexport const clearHistory = () => {\n  localStorage.removeItem(HISTORY_KEY);\n  // Dispatch event to notify listeners of the update\n  window.dispatchEvent(new CustomEvent(HISTORY_UPDATE_EVENT));\n};\n\nexport const getHistoryInsights = (): HistoryInsights => {\n  const history = getHistory();\n  const now = new Date();\n  \n  // Calculate weekly count\n  const startOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\n  const weeklyArticles = history.filter(item => new Date(item.timestamp) >= startOfWeek);\n  \n  // Calculate today's count\n  const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const todayArticles = history.filter(item => new Date(item.timestamp) >= startOfToday);\n  \n  // Find most active hour\n  const hourCounts = new Array(24).fill(0);\n  history.forEach(item => {\n    const hour = new Date(item.timestamp).getHours();\n    hourCounts[hour]++;\n  });\n  const mostActiveHour = hourCounts.reduce(\n    (max, count, hour) => (count > max.count ? { hour, count } : max),\n    { hour: 0, count: 0 }\n  );\n  \n  // Calculate streaks\n  const dateSet = new Set();\n  history.forEach(item => {\n    const date = new Date(item.timestamp);\n    dateSet.add(date.toDateString());\n  });\n  \n  let currentStreak = 0;\n  let longestStreak = 0;\n  let currentDate = new Date();\n  let isOngoing = true;\n  \n  // Check current streak\n  while (dateSet.has(currentDate.toDateString())) {\n    currentStreak++;\n    currentDate.setDate(currentDate.getDate() - 1);\n  }\n  \n  if (!dateSet.has(new Date().toDateString())) {\n    isOngoing = false;\n    currentStreak = 0;\n  }\n  \n  // Find longest streak\n  const dates = Array.from(dateSet).map(d => new Date(d as string));\n  dates.sort((a, b) => b.getTime() - a.getTime());\n  \n  let streak = 1;\n  let maxStreak = 1;\n  let endDate = dates[0];\n  \n  for (let i = 1; i < dates.length; i++) {\n    const diff = Math.round((dates[i-1].getTime() - dates[i].getTime()) / (1000 * 60 * 60 * 24));\n    if (diff === 1) {\n      streak++;\n      if (streak > maxStreak) {\n        maxStreak = streak;\n        endDate = dates[i-1];\n      }\n    } else {\n      streak = 1;\n    }\n  }\n\n  return {\n    weeklyCount: weeklyArticles.length,\n    todayCount: todayArticles.length,\n    mostActiveHour,\n    longestStreak: {\n      days: maxStreak,\n      endDate: endDate || new Date()\n    },\n    currentStreak: {\n      days: currentStreak,\n      ongoing: isOngoing\n    }\n  };\n};\n\n// Export the event name for listeners\nexport const HISTORY_EVENTS = {\n  UPDATE: HISTORY_UPDATE_EVENT\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}