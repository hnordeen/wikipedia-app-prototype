{"ast":null,"code":"const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nexport const searchWikipedia = async query => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map(result => ({\n      title: decodeURIComponent(result.title.replace(/_/g, ' ')),\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(initialResults.map(async result => {\n      const images = await getArticleImages(result.title);\n      return {\n        ...result,\n        images: images.slice(0, 4),\n        imagesLoading: false\n      };\n    }));\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\nexport const getArticleImages = async title => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4',\n    // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images.filter(img => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/)).map(async img => {\n      var _imageInfo$extmetadat, _imageInfo$extmetadat2;\n      const imageInfoParams = new URLSearchParams({\n        action: 'query',\n        prop: 'imageinfo',\n        titles: img.title,\n        iiprop: 'url|extmetadata',\n        format: 'json',\n        origin: '*'\n      });\n      const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n      const imageData = await imageResponse.json();\n      const imagePages = imageData.query.pages;\n      const imagePageId = Object.keys(imagePages)[0];\n      const imageInfo = imagePages[imagePageId].imageinfo[0];\n      return {\n        title: img.title,\n        url: imageInfo.url,\n        description: ((_imageInfo$extmetadat = imageInfo.extmetadata) === null || _imageInfo$extmetadat === void 0 ? void 0 : (_imageInfo$extmetadat2 = _imageInfo$extmetadat.ImageDescription) === null || _imageInfo$extmetadat2 === void 0 ? void 0 : _imageInfo$extmetadat2.value) || ''\n      };\n    });\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\nexport const getArticleContent = async title => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: title,\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    disableeditsection: '1',\n    mobileformat: '1'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    return data.parse.text['*'] || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n};\nexport const getDidYouKnowFacts = async () => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: 'Main_Page',\n    format: 'json',\n    prop: 'text',\n    origin: '*'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const content = data.parse.text['*'];\n\n    // Parse the HTML content\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'text/html');\n\n    // Find the \"Did you know\" section specifically\n    const dykHeader = Array.from(doc.querySelectorAll('h2')).find(h2 => {\n      var _h2$textContent;\n      return ((_h2$textContent = h2.textContent) === null || _h2$textContent === void 0 ? void 0 : _h2$textContent.trim()) === 'Did you know ...';\n    });\n    if (!dykHeader) {\n      console.log('Could not find Did you know section');\n      return [];\n    }\n\n    // Get the list that immediately follows the \"Did you know\" header\n    const dykList = dykHeader.nextElementSibling;\n    if (!dykList || dykList.tagName !== 'UL') {\n      console.log('Could not find Did you know list');\n      return [];\n    }\n    const dykItems = dykList.querySelectorAll('li');\n    const facts = [];\n    dykItems.forEach(item => {\n      var _item$textContent;\n      // Remove any nested elements that aren't links\n      Array.from(item.children).forEach(child => {\n        if (child.tagName !== 'A') {\n          child.remove();\n        }\n      });\n      const text = ((_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.trim()) || '';\n      const links = Array.from(item.querySelectorAll('a')).map(link => {\n        var _link$textContent, _link$getAttribute;\n        return {\n          title: ((_link$textContent = link.textContent) === null || _link$textContent === void 0 ? void 0 : _link$textContent.trim()) || '',\n          link: ((_link$getAttribute = link.getAttribute('href')) === null || _link$getAttribute === void 0 ? void 0 : _link$getAttribute.replace('/wiki/', '')) || ''\n        };\n      }).filter(link => link.link && !link.link.includes(':') && !link.link.includes('#') && link.title.length > 0);\n      if (text && links.length > 0) {\n        facts.push({\n          text: text.replace(/\\s+/g, ' ').trim(),\n          relatedArticles: links.map(link => ({\n            title: link.title,\n            link: link.link\n          }))\n        });\n      }\n    });\n    console.log('Found facts:', facts); // For debugging\n    return facts;\n  } catch (error) {\n    console.error('Error fetching Did You Know facts:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["WIKIPEDIA_API_URL","searchWikipedia","query","params","URLSearchParams","action","list","srsearch","format","origin","srlimit","response","fetch","data","json","searchResults","search","initialResults","map","result","title","decodeURIComponent","replace","snippet","pageid","imagesLoading","resultsWithImages","Promise","all","images","getArticleImages","slice","error","console","prop","titles","imlimit","iiprop","pages","pageId","Object","keys","imagePromises","filter","img","toLowerCase","match","_imageInfo$extmetadat","_imageInfo$extmetadat2","imageInfoParams","imageResponse","imageData","imagePages","imagePageId","imageInfo","imageinfo","url","description","extmetadata","ImageDescription","value","getArticleContent","page","disableeditsection","mobileformat","parse","text","getDidYouKnowFacts","content","parser","DOMParser","doc","parseFromString","dykHeader","Array","from","querySelectorAll","find","h2","_h2$textContent","textContent","trim","log","dykList","nextElementSibling","tagName","dykItems","facts","forEach","item","_item$textContent","children","child","remove","links","link","_link$textContent","_link$getAttribute","getAttribute","includes","length","push","relatedArticles"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/api/wikipedia.ts"],"sourcesContent":["const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\n\nexport interface SearchResult {\n  title: string;\n  snippet: string;\n  pageid: number;\n  images?: ArticleImage[];\n  imagesLoading?: boolean;\n}\n\nexport interface ArticleImage {\n  title: string;\n  url: string;\n  description: string;\n}\n\nexport const searchWikipedia = async (query: string): Promise<SearchResult[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map((result: any) => ({\n      title: decodeURIComponent(result.title.replace(/_/g, ' ')),\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(\n      initialResults.map(async (result: SearchResult) => {\n        const images = await getArticleImages(result.title);\n        return {\n          ...result,\n          images: images.slice(0, 4),\n          imagesLoading: false\n        };\n      })\n    );\n\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\n\nexport const getArticleImages = async (title: string): Promise<ArticleImage[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4', // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images\n      .filter((img: any) => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/))\n      .map(async (img: any) => {\n        const imageInfoParams = new URLSearchParams({\n          action: 'query',\n          prop: 'imageinfo',\n          titles: img.title,\n          iiprop: 'url|extmetadata',\n          format: 'json',\n          origin: '*'\n        });\n\n        const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n        const imageData = await imageResponse.json();\n        const imagePages = imageData.query.pages;\n        const imagePageId = Object.keys(imagePages)[0];\n        const imageInfo = imagePages[imagePageId].imageinfo[0];\n\n        return {\n          title: img.title,\n          url: imageInfo.url,\n          description: imageInfo.extmetadata?.ImageDescription?.value || ''\n        };\n      });\n\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\n\nexport const getArticleContent = async (title: string): Promise<string> => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: title,\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    disableeditsection: '1',\n    mobileformat: '1'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    return data.parse.text['*'] || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n};\n\nexport interface DidYouKnow {\n  text: string;\n  relatedArticles: {\n    title: string;\n    link: string;\n  }[];\n}\n\nexport const getDidYouKnowFacts = async (): Promise<DidYouKnow[]> => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: 'Main_Page',\n    format: 'json',\n    prop: 'text',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const content = data.parse.text['*'];\n\n    // Parse the HTML content\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'text/html');\n    \n    // Find the \"Did you know\" section specifically\n    const dykHeader = Array.from(doc.querySelectorAll('h2')).find(\n      h2 => h2.textContent?.trim() === 'Did you know ...'\n    );\n    \n    if (!dykHeader) {\n      console.log('Could not find Did you know section');\n      return [];\n    }\n\n    // Get the list that immediately follows the \"Did you know\" header\n    const dykList = dykHeader.nextElementSibling;\n    if (!dykList || dykList.tagName !== 'UL') {\n      console.log('Could not find Did you know list');\n      return [];\n    }\n\n    const dykItems = dykList.querySelectorAll('li');\n    const facts: DidYouKnow[] = [];\n    \n    dykItems.forEach(item => {\n      // Remove any nested elements that aren't links\n      Array.from(item.children).forEach(child => {\n        if (child.tagName !== 'A') {\n          child.remove();\n        }\n      });\n      \n      const text = item.textContent?.trim() || '';\n      const links = Array.from(item.querySelectorAll('a'))\n        .map(link => ({\n          title: link.textContent?.trim() || '',\n          link: link.getAttribute('href')?.replace('/wiki/', '') || ''\n        }))\n        .filter(link => \n          link.link && \n          !link.link.includes(':') && \n          !link.link.includes('#') &&\n          link.title.length > 0\n        );\n\n      if (text && links.length > 0) {\n        facts.push({\n          text: text.replace(/\\s+/g, ' ').trim(),\n          relatedArticles: links.map(link => ({\n            title: link.title,\n            link: link.link\n          }))\n        });\n      }\n    });\n\n    console.log('Found facts:', facts); // For debugging\n    return facts;\n  } catch (error) {\n    console.error('Error fetching Did You Know facts:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}