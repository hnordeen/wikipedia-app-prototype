{"ast":null,"code":"const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nexport const searchWikipedia = async query => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map(result => ({\n      title: decodeURIComponent(result.title.replace(/_/g, ' ')),\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(initialResults.map(async result => {\n      const images = await getArticleImages(result.title);\n      return {\n        ...result,\n        images: images.slice(0, 4),\n        imagesLoading: false\n      };\n    }));\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\nexport const getArticleImages = async title => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4',\n    // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images.filter(img => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/)).map(async img => {\n      var _imageInfo$extmetadat, _imageInfo$extmetadat2;\n      const imageInfoParams = new URLSearchParams({\n        action: 'query',\n        prop: 'imageinfo',\n        titles: img.title,\n        iiprop: 'url|extmetadata',\n        format: 'json',\n        origin: '*'\n      });\n      const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n      const imageData = await imageResponse.json();\n      const imagePages = imageData.query.pages;\n      const imagePageId = Object.keys(imagePages)[0];\n      const imageInfo = imagePages[imagePageId].imageinfo[0];\n      return {\n        title: img.title,\n        url: imageInfo.url,\n        description: ((_imageInfo$extmetadat = imageInfo.extmetadata) === null || _imageInfo$extmetadat === void 0 ? void 0 : (_imageInfo$extmetadat2 = _imageInfo$extmetadat.ImageDescription) === null || _imageInfo$extmetadat2 === void 0 ? void 0 : _imageInfo$extmetadat2.value) || ''\n      };\n    });\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\nexport const getArticleContent = async title => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: title,\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    disableeditsection: '1',\n    mobileformat: '1'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    return data.parse.text['*'] || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n};\nexport const getTodaysDidYouKnow = async () => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: 'Wikipedia:Recent_additions',\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    section: '1' // The \"Did you know...\" section\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const content = data.parse.text['*'];\n\n    // Create a temporary element to parse the HTML content\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'text/html');\n\n    // Find today's date section\n    const today = new Date();\n    const dateString = `${today.getDate()} ${today.toLocaleString('default', {\n      month: 'long'\n    })} ${today.getFullYear()}`;\n\n    // Find the section for today's date and extract the facts\n    const facts = [];\n    const sections = doc.querySelectorAll('h3');\n    for (const section of sections) {\n      var _section$textContent;\n      if ((_section$textContent = section.textContent) !== null && _section$textContent !== void 0 && _section$textContent.includes(dateString)) {\n        const factsList = section.nextElementSibling;\n        if (factsList && factsList.tagName === 'UL') {\n          const factItems = factsList.querySelectorAll('li');\n          for (const item of factItems) {\n            const links = item.querySelectorAll('a');\n            const relatedArticles = Array.from(links).map(link => ({\n              title: link.textContent || '',\n              description: '',\n              // We can fetch this separately if needed\n              link: link.getAttribute('title') || ''\n            }));\n            facts.push({\n              text: item.textContent || '',\n              relatedArticles: relatedArticles.filter(article => !article.link.startsWith('Wikipedia:') && !article.link.startsWith('Template:'))\n            });\n          }\n        }\n      }\n    }\n\n    // Fetch descriptions for related articles in parallel\n    const factsWithDescriptions = await Promise.all(facts.map(async fact => ({\n      ...fact,\n      relatedArticles: await Promise.all(fact.relatedArticles.map(async article => {\n        const description = await getArticleDescription(article.link);\n        return {\n          ...article,\n          description\n        };\n      }))\n    })));\n    return factsWithDescriptions;\n  } catch (error) {\n    console.error('Error fetching Did You Know facts:', error);\n    return [];\n  }\n};\nasync function getArticleDescription(title) {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'extracts',\n    exintro: '1',\n    explaintext: '1',\n    titles: title,\n    format: 'json',\n    origin: '*'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    return pages[pageId].extract || '';\n  } catch (error) {\n    console.error('Error fetching article description:', error);\n    return '';\n  }\n}","map":{"version":3,"names":["WIKIPEDIA_API_URL","searchWikipedia","query","params","URLSearchParams","action","list","srsearch","format","origin","srlimit","response","fetch","data","json","searchResults","search","initialResults","map","result","title","decodeURIComponent","replace","snippet","pageid","imagesLoading","resultsWithImages","Promise","all","images","getArticleImages","slice","error","console","prop","titles","imlimit","iiprop","pages","pageId","Object","keys","imagePromises","filter","img","toLowerCase","match","_imageInfo$extmetadat","_imageInfo$extmetadat2","imageInfoParams","imageResponse","imageData","imagePages","imagePageId","imageInfo","imageinfo","url","description","extmetadata","ImageDescription","value","getArticleContent","page","disableeditsection","mobileformat","parse","text","getTodaysDidYouKnow","section","content","parser","DOMParser","doc","parseFromString","today","Date","dateString","getDate","toLocaleString","month","getFullYear","facts","sections","querySelectorAll","_section$textContent","textContent","includes","factsList","nextElementSibling","tagName","factItems","item","links","relatedArticles","Array","from","link","getAttribute","push","article","startsWith","factsWithDescriptions","fact","getArticleDescription","exintro","explaintext","extract"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/api/wikipedia.ts"],"sourcesContent":["const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\n\nexport interface SearchResult {\n  title: string;\n  snippet: string;\n  pageid: number;\n  images?: ArticleImage[];\n  imagesLoading?: boolean;\n}\n\nexport interface ArticleImage {\n  title: string;\n  url: string;\n  description: string;\n}\n\nexport const searchWikipedia = async (query: string): Promise<SearchResult[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map((result: any) => ({\n      title: decodeURIComponent(result.title.replace(/_/g, ' ')),\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(\n      initialResults.map(async (result: SearchResult) => {\n        const images = await getArticleImages(result.title);\n        return {\n          ...result,\n          images: images.slice(0, 4),\n          imagesLoading: false\n        };\n      })\n    );\n\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\n\nexport const getArticleImages = async (title: string): Promise<ArticleImage[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4', // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images\n      .filter((img: any) => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/))\n      .map(async (img: any) => {\n        const imageInfoParams = new URLSearchParams({\n          action: 'query',\n          prop: 'imageinfo',\n          titles: img.title,\n          iiprop: 'url|extmetadata',\n          format: 'json',\n          origin: '*'\n        });\n\n        const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n        const imageData = await imageResponse.json();\n        const imagePages = imageData.query.pages;\n        const imagePageId = Object.keys(imagePages)[0];\n        const imageInfo = imagePages[imagePageId].imageinfo[0];\n\n        return {\n          title: img.title,\n          url: imageInfo.url,\n          description: imageInfo.extmetadata?.ImageDescription?.value || ''\n        };\n      });\n\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\n\nexport const getArticleContent = async (title: string): Promise<string> => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: title,\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    disableeditsection: '1',\n    mobileformat: '1'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    return data.parse.text['*'] || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n};\n\ninterface DidYouKnowFact {\n  text: string;\n  relatedArticles: {\n    title: string;\n    description: string;\n    link: string;\n  }[];\n}\n\nexport const getTodaysDidYouKnow = async (): Promise<DidYouKnowFact[]> => {\n  const params = new URLSearchParams({\n    action: 'parse',\n    page: 'Wikipedia:Recent_additions',\n    format: 'json',\n    prop: 'text',\n    origin: '*',\n    section: '1', // The \"Did you know...\" section\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const content = data.parse.text['*'];\n\n    // Create a temporary element to parse the HTML content\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'text/html');\n\n    // Find today's date section\n    const today = new Date();\n    const dateString = `${today.getDate()} ${today.toLocaleString('default', { month: 'long' })} ${today.getFullYear()}`;\n    \n    // Find the section for today's date and extract the facts\n    const facts: DidYouKnowFact[] = [];\n    const sections = doc.querySelectorAll('h3');\n    \n    for (const section of sections) {\n      if (section.textContent?.includes(dateString)) {\n        const factsList = section.nextElementSibling;\n        if (factsList && factsList.tagName === 'UL') {\n          const factItems = factsList.querySelectorAll('li');\n          \n          for (const item of factItems) {\n            const links = item.querySelectorAll('a');\n            const relatedArticles = Array.from(links).map(link => ({\n              title: link.textContent || '',\n              description: '', // We can fetch this separately if needed\n              link: link.getAttribute('title') || ''\n            }));\n\n            facts.push({\n              text: item.textContent || '',\n              relatedArticles: relatedArticles.filter(article => \n                !article.link.startsWith('Wikipedia:') && \n                !article.link.startsWith('Template:')\n              )\n            });\n          }\n        }\n      }\n    }\n\n    // Fetch descriptions for related articles in parallel\n    const factsWithDescriptions = await Promise.all(\n      facts.map(async fact => ({\n        ...fact,\n        relatedArticles: await Promise.all(\n          fact.relatedArticles.map(async article => {\n            const description = await getArticleDescription(article.link);\n            return {\n              ...article,\n              description\n            };\n          })\n        )\n      }))\n    );\n\n    return factsWithDescriptions;\n  } catch (error) {\n    console.error('Error fetching Did You Know facts:', error);\n    return [];\n  }\n};\n\nasync function getArticleDescription(title: string): Promise<string> {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'extracts',\n    exintro: '1',\n    explaintext: '1',\n    titles: title,\n    format: 'json',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    return pages[pageId].extract || '';\n  } catch (error) {\n    console.error('Error fetching article description:', error);\n    return '';\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}