{"ast":null,"code":"const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\nexport const searchWikipedia = async query => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map(result => ({\n      title: result.title,\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(initialResults.map(async result => {\n      const images = await getArticleImages(result.title);\n      return {\n        ...result,\n        images: images.slice(0, 4),\n        imagesLoading: false\n      };\n    }));\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\nexport const getArticleImages = async title => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4',\n    // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images.filter(img => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/)).map(async img => {\n      var _imageInfo$extmetadat, _imageInfo$extmetadat2;\n      const imageInfoParams = new URLSearchParams({\n        action: 'query',\n        prop: 'imageinfo',\n        titles: img.title,\n        iiprop: 'url|extmetadata',\n        format: 'json',\n        origin: '*'\n      });\n      const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n      const imageData = await imageResponse.json();\n      const imagePages = imageData.query.pages;\n      const imagePageId = Object.keys(imagePages)[0];\n      const imageInfo = imagePages[imagePageId].imageinfo[0];\n      return {\n        title: img.title,\n        url: imageInfo.url,\n        description: ((_imageInfo$extmetadat = imageInfo.extmetadata) === null || _imageInfo$extmetadat === void 0 ? void 0 : (_imageInfo$extmetadat2 = _imageInfo$extmetadat.ImageDescription) === null || _imageInfo$extmetadat2 === void 0 ? void 0 : _imageInfo$extmetadat2.value) || ''\n      };\n    });\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\nexport const getArticleContent = async title => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'extracts',\n    exintro: '1',\n    explaintext: '1',\n    titles: title,\n    format: 'json',\n    origin: '*'\n  });\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    return pages[pageId].extract || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n};","map":{"version":3,"names":["WIKIPEDIA_API_URL","searchWikipedia","query","params","URLSearchParams","action","list","srsearch","format","origin","srlimit","response","fetch","data","json","searchResults","search","initialResults","map","result","title","snippet","pageid","imagesLoading","resultsWithImages","Promise","all","images","getArticleImages","slice","error","console","prop","titles","imlimit","iiprop","pages","pageId","Object","keys","imagePromises","filter","img","toLowerCase","match","_imageInfo$extmetadat","_imageInfo$extmetadat2","imageInfoParams","imageResponse","imageData","imagePages","imagePageId","imageInfo","imageinfo","url","description","extmetadata","ImageDescription","value","getArticleContent","exintro","explaintext","extract"],"sources":["/Users/haleynordeen/Desktop/Wikipedia App Prototyping/src/api/wikipedia.ts"],"sourcesContent":["const WIKIPEDIA_API_URL = 'https://en.wikipedia.org/w/api.php';\n\nexport interface SearchResult {\n  title: string;\n  snippet: string;\n  pageid: number;\n  images?: ArticleImage[];\n  imagesLoading?: boolean;\n}\n\nexport interface ArticleImage {\n  title: string;\n  url: string;\n  description: string;\n}\n\nexport const searchWikipedia = async (query: string): Promise<SearchResult[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    list: 'search',\n    srsearch: query,\n    format: 'json',\n    origin: '*',\n    srlimit: '10'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const searchResults = data.query.search;\n\n    // Return results immediately with imagesLoading state\n    const initialResults = searchResults.map((result: any) => ({\n      title: result.title,\n      snippet: result.snippet,\n      pageid: result.pageid,\n      imagesLoading: true\n    }));\n\n    // Fetch images in parallel for all results\n    const resultsWithImages = await Promise.all(\n      initialResults.map(async (result) => {\n        const images = await getArticleImages(result.title);\n        return {\n          ...result,\n          images: images.slice(0, 4),\n          imagesLoading: false\n        };\n      })\n    );\n\n    return resultsWithImages;\n  } catch (error) {\n    console.error('Error searching Wikipedia:', error);\n    return [];\n  }\n};\n\nexport const getArticleImages = async (title: string): Promise<ArticleImage[]> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'images|imageinfo',\n    titles: title,\n    imlimit: '4', // Reduced from 10 to 4 since we only show 4 images\n    iiprop: 'url|extmetadata',\n    format: 'json',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    const images = pages[pageId].images || [];\n\n    // Filter out non-image files and get image URLs\n    const imagePromises = images\n      .filter((img: any) => img.title.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/))\n      .map(async (img: any) => {\n        const imageInfoParams = new URLSearchParams({\n          action: 'query',\n          prop: 'imageinfo',\n          titles: img.title,\n          iiprop: 'url|extmetadata',\n          format: 'json',\n          origin: '*'\n        });\n\n        const imageResponse = await fetch(`${WIKIPEDIA_API_URL}?${imageInfoParams}`);\n        const imageData = await imageResponse.json();\n        const imagePages = imageData.query.pages;\n        const imagePageId = Object.keys(imagePages)[0];\n        const imageInfo = imagePages[imagePageId].imageinfo[0];\n\n        return {\n          title: img.title,\n          url: imageInfo.url,\n          description: imageInfo.extmetadata?.ImageDescription?.value || ''\n        };\n      });\n\n    return Promise.all(imagePromises);\n  } catch (error) {\n    console.error('Error fetching article images:', error);\n    return [];\n  }\n};\n\nexport const getArticleContent = async (title: string): Promise<string> => {\n  const params = new URLSearchParams({\n    action: 'query',\n    prop: 'extracts',\n    exintro: '1',\n    explaintext: '1',\n    titles: title,\n    format: 'json',\n    origin: '*'\n  });\n\n  try {\n    const response = await fetch(`${WIKIPEDIA_API_URL}?${params}`);\n    const data = await response.json();\n    const pages = data.query.pages;\n    const pageId = Object.keys(pages)[0];\n    return pages[pageId].extract || 'No content found.';\n  } catch (error) {\n    console.error('Error fetching article:', error);\n    return 'Error loading article content.';\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}